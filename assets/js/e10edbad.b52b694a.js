"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[912],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,y=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(y,i(i({ref:t},c),{},{components:n})):a.createElement(y,i({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6888:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return u}});var a=n(7462),r=n(3366),o=(n(7294),n(3905)),i=["components"],l={id:"gateway",title:"Gateway"},s=void 0,p={unversionedId:"applications/gateway",id:"applications/gateway",title:"Gateway",description:"The gateway is responsible for connecting your bot to Discord and is what will put your bot",source:"@site/docs/applications/gateway.md",sourceDirName:"applications",slug:"/applications/gateway",permalink:"/docs/applications/gateway",draft:!1,editUrl:"https://github.com/spec-tacles/website/edit/master/website/docs/applications/gateway.md",tags:[],version:"current",frontMatter:{id:"gateway",title:"Gateway"},sidebar:"docs",previous:{title:"Ping Pong",permalink:"/docs/ping_pong"},next:{title:"Proxy",permalink:"/docs/applications/proxy"}},c={},u=[{value:"Config",id:"config",level:2},{value:"Standard IO",id:"standard-io",level:2},{value:"Redis",id:"redis",level:2},{value:"AMQP",id:"amqp",level:2},{value:"Reference",id:"reference",level:2}],d={toc:u};function m(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,'The gateway is responsible for connecting your bot to Discord and is what will put your bot\n"online". The Spectacles Gateway automatically handles the complexities involved with reconnection,\nratelimiting, and sharding and outputs a continuous stream of events to your applications.'),(0,o.kt)("h2",{id:"config"},"Config"),(0,o.kt)("p",null,"The Spectacles Gateway has a variety of configuration options, but there are only 3 values that\nyou ",(0,o.kt)("em",{parentName:"p"},"must")," provide for the Gateway to work: your bot token, a list of\n",(0,o.kt)("a",{parentName:"p",href:"https://discord.com/developers/docs/topics/gateway#event-names"},"events")," to publish, and\n",(0,o.kt)("a",{parentName:"p",href:"https://discord.com/developers/docs/topics/gateway#gateway-intents"},"intents"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-toml"},'token = ""\nevents = ["GUILD_CREATE"]\nintents = ["GUILD"]\n')),(0,o.kt)("p",null,"By default, the Gateway reads its config file from ",(0,o.kt)("inlineCode",{parentName:"p"},"gateway.toml")," in the current working directory.\nYou can also use environment variables in situations where that may be more convenient (e.g. when)\nrunning in a Docker Compose environment."),(0,o.kt)("p",null,"You can also specify this config using environment variables."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"DISCORD_TOKEN"),": your token"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"DISCORD_EVENTS"),": comma-separated string of gateway event names"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"DISCORD_INTENTS"),": comma-separated string of intents")),(0,o.kt)("h2",{id:"standard-io"},"Standard IO"),(0,o.kt)("p",null,"By default, the Gateway simply outputs to standard output. If you'd like to run a quick test,\nhere's a Docker command you can run to see incoming ",(0,o.kt)("inlineCode",{parentName:"p"},"MESSAGE_CREATE")," events."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'docker run --rm -it\n    -e DISCORD_TOKEN="your token"\n    -e DISCORD_EVENTS=MESSAGE_CREATE\n    -e DISCORD_INTENTS=GUILD,GUILD_MESSAGES\n    spectacles/gateway\n')),(0,o.kt)("p",null,"You can even publish data ",(0,o.kt)("em",{parentName:"p"},"back")," to the gateway if you input MessagePack to the terminal."),(0,o.kt)("p",null,"This is the JSON format used when using the STDIO mode of the gateway. ",(0,o.kt)("inlineCode",{parentName:"p"},"event"),"\nis mapped to the ",(0,o.kt)("inlineCode",{parentName:"p"},"t")," property and ",(0,o.kt)("inlineCode",{parentName:"p"},"data")," is mapped to the ",(0,o.kt)("inlineCode",{parentName:"p"},"d")," property of a\n",(0,o.kt)("a",{parentName:"p",href:"https://discord.com/developers/docs/topics/gateway#payloads-gateway-payload-structure"},"Gateway packet"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n    "event": "",\n    "data": {}\n}\n')),(0,o.kt)("h2",{id:"redis"},"Redis"),(0,o.kt)("p",null,"Change your config to specify Redis as the broker type and provide Redis connection options."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-toml"},'# base config here\n\n[broker]\ntype = "redis"\n\n[redis]\nurl = "localhost:6379"\n')),(0,o.kt)("p",null,"You can now consume events from this Redis instance. To verify that this is working, simply execute\n",(0,o.kt)("inlineCode",{parentName:"p"},"XREAD STREAMS {event_name} 0-0")," on Redis, where ",(0,o.kt)("inlineCode",{parentName:"p"},"{event_name}")," is replaced with a Discord event\nyou are expecting (e.g. GUILD_CREATE)."),(0,o.kt)("p",null,"You can also change the shard store to Redis. This will allow your gateway sessions to persist past\nrestarts in case your gateway dies."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-toml"},'[shard_store]\ntype = "redis"\nprefix = "gateway"\n')),(0,o.kt)("h2",{id:"amqp"},"AMQP"),(0,o.kt)("p",null,"Change your config to specify AMQP as the broker type and provide AMQP connection options."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-toml"},'# base config here\n\n[broker]\ntype = "amqp"\n\n[amqp]\nurl = "amqp://localhost"\n')),(0,o.kt)("p",null,"To run a quick demonstration of the AMQP capabilities:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Setup a RabbitMQ instance")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"docker run --rm -it \\\n    --name rabbit \\\n    -p 5672:5672 \\\n    -p 15672:15672 \\\n    rabbitmq:3-management\n")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"Run the Gateway and connect it to RabbitMQ")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'docker run --rm -it \\\n    --name gateway \\\n    -e DISCORD_TOKEN="your token" \\\n    -e DISCORD_EVENTS=MESSAGE_CREATE \\\n    -e BROKER_TYPE=amqp \\\n    -e AMQP_URL=amqp://localhost:5672\n')),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},"Send a message in any guild that your bot is in"),(0,o.kt)("li",{parentName:"ol"},"View the RabbitMQ dashboard at ",(0,o.kt)("a",{parentName:"li",href:"http://localhost:15672"},(0,o.kt)("inlineCode",{parentName:"a"},"http://localhost:15672"))),(0,o.kt)("li",{parentName:"ol"},'Navigate to "Queues" and select "gateway:MESSAGE_CREATE"'),(0,o.kt)("li",{parentName:"ol"},'Expand "Get messages"'),(0,o.kt)("li",{parentName:"ol"},'Change "Ack Mode" to "Ack message requeue false"'),(0,o.kt)("li",{parentName:"ol"},'Click "Get Message(s)"')),(0,o.kt)("p",null,"You should see JSON output in your dashboard with the contents of the Discord message you sent."),(0,o.kt)("h2",{id:"reference"},"Reference"),(0,o.kt)("p",null,"Detailed Spectacles Gateway documentation is available on ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/spec-tacles/gateway"},"GitHub"),"."))}m.isMDXComponent=!0}}]);
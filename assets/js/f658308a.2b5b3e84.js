"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[805],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return g}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(t),g=o,m=d["".concat(c,".").concat(g)]||d[g]||u[g]||i;return t?r.createElement(m,a(a({ref:n},p),{},{components:t})):r.createElement(m,a({ref:n},p))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=d;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var s=2;s<i;s++)a[s]=t[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8007:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return c},default:function(){return g},frontMatter:function(){return l},metadata:function(){return s},toc:function(){return u}});var r=t(7462),o=t(3366),i=(t(7294),t(3905)),a=["components"],l={id:"ping_pong",title:"Ping Pong"},c=void 0,s={unversionedId:"ping_pong",id:"ping_pong",title:"Ping Pong",description:"Now that your bot is receiving messages, you can respond to them.",source:"@site/docs/ping_pong.md",sourceDirName:".",slug:"/ping_pong",permalink:"/docs/ping_pong",draft:!1,editUrl:"https://github.com/spec-tacles/website/edit/master/website/docs/ping_pong.md",tags:[],version:"current",frontMatter:{id:"ping_pong",title:"Ping Pong"},sidebar:"docs",previous:{title:"Introduction",permalink:"/docs/"},next:{title:"Example",permalink:"/docs/example"}},p={},u=[{value:"Launching the Proxy",id:"launching-the-proxy",level:2},{value:"Installing Dependencies",id:"installing-dependencies",level:2},{value:"Modifying The Handler",id:"modifying-the-handler",level:2},{value:"Next Steps",id:"next-steps",level:2}],d={toc:u};function g(e){var n=e.components,t=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Now that your bot is receiving messages, you can respond to them."),(0,i.kt)("h2",{id:"launching-the-proxy"},"Launching the Proxy"),(0,i.kt)("p",null,"The proxy will handle all of your outgoing HTTP requests to Discord. To launch the Spectacles\nproxy:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"docker run \\\n    --rm -it \\\n    --network host \\\n    spectacles/proxy:latest\n")),(0,i.kt)("h2",{id:"installing-dependencies"},"Installing Dependencies"),(0,i.kt)("p",null,"Add the Spectacles proxy client library."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm i @spectacles/proxy\n")),(0,i.kt)("h2",{id:"modifying-the-handler"},"Modifying The Handler"),(0,i.kt)("p",null,'Update your command handler to send a "pong" back when it receives a "ping".'),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Replace ",(0,i.kt)("inlineCode",{parentName:"p"},"your bot token")," with your Discord bot token.")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"import { Redis } from '@spectacles/brokers';\nimport Rest from '@spectacles/proxy';\nimport RedisClient from 'ioredis';\n\nconst client = new RedisClient();\nconst gatewayBroker = new Redis('gateway', client);\nconst proxyBroker = new Redis('proxy', client);\nconst rest = new Rest(proxyBroker, 'your bot token');\n\ngatewayBroker.on('MESSAGE_CREATE', async (msg, { ack }) => {\n    await ack();\n    console.log(msg);\n\n    if (msg.content === 'ping') {\n        await rest.post(`/channels/${msg.channel_id}/messages`, { content: 'pong' });\n    }\n});\n\ngatewayBroker.subscribe('MESSAGE_CREATE');\n")),(0,i.kt)("h2",{id:"next-steps"},"Next Steps"),(0,i.kt)("p",null,"You have a fully functioning and scalable Discord bot now. The possibilities are endless:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Continue developing your command handler"),(0,i.kt)("li",{parentName:"ul"},"Add a completely new application (a website?)"),(0,i.kt)("li",{parentName:"ul"},"Continue reading about how Spectacles works"),(0,i.kt)("li",{parentName:"ul"},"???")))}g.isMDXComponent=!0}}]);
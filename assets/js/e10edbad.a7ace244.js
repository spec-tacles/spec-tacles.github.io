"use strict";(self.webpackChunksite=self.webpackChunksite||[]).push([[912],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return d}});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var o=n.createContext({}),c=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},p=function(e){var t=c(e.components);return n.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,l=e.originalType,o=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=c(a),d=i,k=m["".concat(o,".").concat(d)]||m[d]||u[d]||l;return a?n.createElement(k,r(r({ref:t},p),{},{components:a})):n.createElement(k,r({ref:t},p))}));function d(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=a.length,r=new Array(l);r[0]=m;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s.mdxType="string"==typeof e?e:i,r[1]=s;for(var c=2;c<l;c++)r[c]=a[c];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},6888:function(e,t,a){a.r(t),a.d(t,{assets:function(){return p},contentTitle:function(){return o},default:function(){return d},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return u}});var n=a(7462),i=a(3366),l=(a(7294),a(3905)),r=["components"],s={id:"gateway",title:"Gateway"},o="Gateway",c={unversionedId:"applications/gateway",id:"applications/gateway",title:"Gateway",description:"Docker pulls",source:"@site/docs/applications/gateway.md",sourceDirName:"applications",slug:"/applications/gateway",permalink:"/docs/applications/gateway",draft:!1,editUrl:"https://github.com/spec-tacles/website/edit/master/website/docs/applications/gateway.md",tags:[],version:"current",frontMatter:{id:"gateway",title:"Gateway"},sidebar:"docs",previous:{title:"Example",permalink:"/docs/example"},next:{title:"Proxy",permalink:"/docs/applications/proxy"}},p={},u=[{value:"Getting Started",id:"getting-started",level:2},{value:"Example",id:"example",level:3},{value:"Usage",id:"usage",level:2},{value:"Config file",id:"config-file",level:3},{value:"Environment variables",id:"environment-variables",level:3},{value:"How It Works",id:"how-it-works",level:2},{value:"Goals",id:"goals",level:2}],m={toc:u};function d(e){var t=e.components,a=(0,i.Z)(e,r);return(0,l.kt)("wrapper",(0,n.Z)({},m,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"gateway"},"Gateway"),(0,l.kt)("p",null,(0,l.kt)("a",{parentName:"p",href:"https://hub.docker.com/r/spectacles/gateway"},(0,l.kt)("img",{parentName:"a",src:"https://img.shields.io/docker/pulls/spectacles/gateway",alt:"Docker pulls"}))),(0,l.kt)("p",null,"The Spectacles gateway acts as a standalone process between your Discord bot application and the\nDiscord gateway, allowing your bot to focus entirely on application logic. This has numerous\nbenefits:"),(0,l.kt)("ol",null,(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("strong",{parentName:"li"},"Seamless upgrades.")," If you configure the Spectacles Gateway to use one of the supported\nmessage broker protocols, you can restart your bot and not lose any messages from the Discord\nGateway."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("strong",{parentName:"li"},"Load scalability.")," With the Spectacles Gateway responsible for all of the Discord logic,\nyou can scale your bot to handle high-load situations without worrying about restarting shards\nand sessions."),(0,l.kt)("li",{parentName:"ol"},(0,l.kt)("strong",{parentName:"li"},"Feature scalability.")," Since Discord messages get sent into a message broker, you can consume\nthem from more than just your bot application. Making a dashboard is trivial since you can run a\nweb application independently of your bot application and receive the exact same data.")),(0,l.kt)("h2",{id:"getting-started"},"Getting Started"),(0,l.kt)("p",null,"The recommended usage is through Docker, but pre-built binaries are also available in Github\nActions or you can compile it yourself using the latest Go compiler. Note that C build tools must\nbe available on your machine."),(0,l.kt)("h3",{id:"example"},"Example"),(0,l.kt)("p",null,"This example uses Docker to launch the most basic form of gateway with only the ",(0,l.kt)("inlineCode",{parentName:"p"},"MESSAGE_CREATE"),"\nevent being output to STDOUT."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'docker run --rm -it \\\n    -e DISCORD_TOKEN="your token" \\\n    -e DISCORD_EVENTS=MESSAGE_CREATE \\\n    -e DISCORD_INTENTS=GUILD,GUILD_MESSAGES \\\n    spectacles/gateway\n')),(0,l.kt)("h2",{id:"usage"},"Usage"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre"},'Usage of gateway:\n  -config string\n        location of the gateway config file (default "gateway.toml")\n  -loglevel string\n        log level for the client (default "info")\n')),(0,l.kt)("p",null,"The gateway can be configured using either a config file or environment variables. Environment\nvariables take precedence over their corresponding entry in the config file."),(0,l.kt)("h3",{id:"config-file"},"Config file"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-toml"},'token = "" # Discord token\nevents = [] # array of gateway event names to publish\n\n# https://discord.com/developers/docs/topics/gateway#gateway-intents\nintents = [] # array of gateway intents to send when identifying\n\n# everything below is optional\n\n[shards]\ncount = 2\nids = [0, 1]\n\n[broker]\ntype = "redis" # can also use "amqp"\ngroup = "gateway"\nmessage_timeout = "2m" # this is the default value: https://golang.org/pkg/time/#ParseDuration\n\n[api]\nversion = 10\nscheme = "https"\nhost = "discord.com"\n\n# exposes Prometheus-compatible statistics\n[prometheus]\naddress = ":8080"\nendpoint = "/metrics"\n\n[shard_store]\ntype = "redis" # if left empty, shard info is stored locally\nprefix = "gateway" # string to prefix shard-store keys\n\n[presence]\n# https://discord.com/developers/docs/topics/gateway#update-status\n\n[redis]\nurl = "localhost:6379"\npool_size = 5 # size of Redis connection pool\n\n# required for AMQP broker type\n[amqp]\nurl = "amqp://localhost"\n')),(0,l.kt)("p",null,"Example presence:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-toml"},'[presence]\nstatus = "online"\n\n[presence.game]\nname = "test"\ntype = 0\n')),(0,l.kt)("h3",{id:"environment-variables"},"Environment variables"),(0,l.kt)("p",null,"Each of the below environment variables corresponds exactly to the config file above."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"DISCORD_TOKEN")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"DISCORD_EVENTS"),": comma-separated list of gateway events")),(0,l.kt)("p",null,"Optional:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"DISCORD_INTENTS"),": comma-separated list of gateway intents"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"DISCORD_RAW_INTENTS"),": bitfield containing raw intent flags"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"DISCORD_SHARD_COUNT")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"DISCORD_SHARD_IDS"),": comma-separated list of shard IDs"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"DISCORD_API_VERSION")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"DISCORD_API_SCHEME")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"DISCORD_API_HOST")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"BROKER_TYPE")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"BROKER_GROUP")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"BROKER_MESSAGE_TIMEOUT")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"PROMETHEUS_ADDRESS")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"PROMETHEUS_ENDPOINT")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"SHARD_STORE_TYPE")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"SHARD_STORE_PREFIX")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"DISCORD_PRESENCE"),": JSON-formatted presence object")),(0,l.kt)("p",null,"External connections:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"AMQP_URL")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"REDIS_URL")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"REDIS_POOL_SIZE"))),(0,l.kt)("h2",{id:"how-it-works"},"How It Works"),(0,l.kt)("p",null,"The Spectacles Gateway handles all of the Discord logic and simply forwards events to the specified\nmessage broker. Your application is completely unaware of the existence of shards and just focuses\non handling incoming messages."),(0,l.kt)("p",null,"By default, the Spectacles Gateway sends and receives data through standard input and output. For\noptimal use, you should use one of the available message broker protocols (Redis or AMQP) to\nsend output to an external message broker (we recommend Redis). Your application can then\nconsume messages from the message broker."),(0,l.kt)("p",null,"Logs are output to STDERR and can be used to inspect the state of the gateway at any point. The\nSpectacles Gateway also offers integration with Prometheus to enable detailed stats collection."),(0,l.kt)("p",null,"If you configure a shard storage solution (currently only Redis), shard information will be stored\nthere and used if/when the Spectacles Gateway restarts. If the Gateway restarts quickly enough, it\nwill be able to resume sessions without re-identifying to Discord. If you do not configure shard\nstorage, the gateway will just store the info in local memory."),(0,l.kt)("h2",{id:"goals"},"Goals"),(0,l.kt)("ul",{className:"contains-task-list"},(0,l.kt)("li",{parentName:"ul",className:"task-list-item"},(0,l.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Multiple output destinations",(0,l.kt)("ul",{parentName:"li",className:"contains-task-list"},(0,l.kt)("li",{parentName:"ul",className:"task-list-item"},(0,l.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","STDIO"),(0,l.kt)("li",{parentName:"ul",className:"task-list-item"},(0,l.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","AMQP"),(0,l.kt)("li",{parentName:"ul",className:"task-list-item"},(0,l.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Redis"))),(0,l.kt)("li",{parentName:"ul",className:"task-list-item"},(0,l.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Sharding",(0,l.kt)("ul",{parentName:"li",className:"contains-task-list"},(0,l.kt)("li",{parentName:"ul",className:"task-list-item"},(0,l.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Internal"),(0,l.kt)("li",{parentName:"ul",className:"task-list-item"},(0,l.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","External"),(0,l.kt)("li",{parentName:"ul",className:"task-list-item"},(0,l.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Auto (fully managed)"))),(0,l.kt)("li",{parentName:"ul",className:"task-list-item"},(0,l.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Distributable binary builds",(0,l.kt)("ul",{parentName:"li",className:"contains-task-list"},(0,l.kt)("li",{parentName:"ul",className:"task-list-item"},(0,l.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Linux"),(0,l.kt)("li",{parentName:"ul",className:"task-list-item"},(0,l.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Windows"))),(0,l.kt)("li",{parentName:"ul",className:"task-list-item"},(0,l.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Multithreading"),(0,l.kt)("li",{parentName:"ul",className:"task-list-item"},(0,l.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Zero-alloc message handling"),(0,l.kt)("li",{parentName:"ul",className:"task-list-item"},(0,l.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Discord compression (ZSTD)"),(0,l.kt)("li",{parentName:"ul",className:"task-list-item"},(0,l.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Automatic restarting"),(0,l.kt)("li",{parentName:"ul",className:"task-list-item"},(0,l.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Failover"),(0,l.kt)("li",{parentName:"ul",className:"task-list-item"},(0,l.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Session resuming",(0,l.kt)("ul",{parentName:"li",className:"contains-task-list"},(0,l.kt)("li",{parentName:"ul",className:"task-list-item"},(0,l.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Local"),(0,l.kt)("li",{parentName:"ul",className:"task-list-item"},(0,l.kt)("input",{parentName:"li",type:"checkbox",checked:!0,disabled:!0})," ","Redis")))))}d.isMDXComponent=!0}}]);